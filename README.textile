h1(#projektarbeit_persistenz). Projektarbeit_Persistenz

h2(#einleitung). Einleitung

 In diesem Projekt werden drei Hauptanforderungen behandelt, nämlich Java Persistence API, Maven und Hibernate. Der Projektprozess wird mit Maven eingerichtet, in dem Abhängigkeiten (dependencies) hinzugefügt werden.

 Anschließend wird anhand einer Reihe von Klassen und Methoden gezeigt, wie Hibernate das Hinzufügen, Ändern, Entfernen und Abrufen von Objektdaten aus einer MySQL-Datenbank behandelt.

h2(#verwendete-softwareprogramme-und-technologien). Verwendete Softwareprogramme und Technologien

* Git Bash - GitHub
* Java SE 8
* Eclipse IDE: 2018-12
* MySQL: 8.0.16 (MySQL Community Server - GLP)
* HIBERNATE : ORM 5.2
* JPA: Java Persistence API 2.1
* (JUnit 5)
* (Swing oder Javafx)

h2(#projekt-aufgaben). Projekt - Aufgaben

h3(#1-berblick-ber-jpa-und-hibernate). 1.	Überblick über JPA und Hibernate

* JPA ist eine Java-API-Spezifikation für die Verwaltung relationaler Daten in Anwendungen, die Java SE und Java EE verwenden.
* Verwendete Version: JPA 2.1
* API Package: javax.persistence
* Java Persistence Query Language (JPQL)
* Implementierungen: Hibernate, EclipseLink, OpenJPA…
* Hibernate ist ein Object-Relational Mapping Framework (ORM), ein Anbieter von JPA.
* Hibernate verwendet Hibernate Query Language (HQL) zum Abfragen von Daten.

h3(#2-eine-mysql-datenbank-erstellen). 2.	Eine MySQL Datenbank erstellen

* Datenbank Name:
* Tabelle Name:

h3(#3-java-maven-project-in-eclipse-einrichten). 3. Java Maven Project in Eclipse einrichten

* Maven Projekt erstellen: In Eclipse File -> new -> Maven Project

** Projekt Name: KundenVerwaltung _Maven_ JPA_MySQL (Beispiel)
** Group Id: org.development
** Artifact Id: KundenVerwaltung _Maven_ JPA_MySQL

*** JRE System Library anpassen (Properties in pom.xml Datei einfügen):

bc.              <properties>
                 <maven.compiler.source>1.8</maven.compiler.source>
                 <maven.compiler.target>1.8</maven.compiler.target>
              </properties>
         
       -> Tips: nach Import projects vom GitHub Respository -> Maus Rechtsklick > Maven > Update Project
   

* Dependencies konfigurieren für :
* Hibernate (ORM)

bc.           Browser: https://search.maven.org/ -> search -> hibernate-core
          org.hibernate:hibernate-core:5.2.12.Final
           pmo.xml -> Dependencies
           Artifact Id: hibernate-core
    

* MySQL Connector Java (JDBC Driver)

bc.      Artifact Id: mysql-connector-java
      mysql:mysql-connector-java:8.0.16
 

* Dependencies konfiguration in pom.xml sieht so aus :

bc.      <project xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <groupId>net.codejava</groupId>
        <artifactId>BooksManager</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      <dependencies>
         <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>5.2.12.Final</version>
         </dependency>
         <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.16</version>
         </dependency>
       </dependencies>
     </project>

h3(#4-java-model-class-jpa-annotations-erstellen). 4. Java Model Class + JPA Annotations erstellen

* Verwendung der JPA Annotations

bc.    @Entity
   @Id
   @GeneratedValue
   @Table
   @Column

h3(#5-jpa-configuration-file-erstellen). 5.	JPA Configuration File erstellen

* persistence.xml erstellen

bc.       META-INF Datei in src/main/resources erstellen
  

* META-INF -> new -> XML File -> File name: persistence.xml -> Source
* JPA persistence schemas sowie persistence-unit und properties einfügen:

bc.     Browser: JPA XML Schemas (Oracle) 
    -> Datei: persistence_2_1.xsd öffnen -> Code-Teil kopieren und einfügen (siehe unten) 
     

* Properties angeben : 

bc.     JDBC: URL, User, Password
    Show und Format SQL  

* konfiguration in persistence.xml sieht so aus : 

bc.     <?xml version="1.0" encoding="UTF-8"?>
    <persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
    version="2.1">
    <persistence-unit name="BookUnit">
    <properties>
        <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/booksdb?serverTimezone=UTC" />
        <property name="javax.persistence.jdbc.user" value="root" />
        <property name="javax.persistence.jdbc.password" value="******" />
        <property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" />
        <property name="hibernate.show_sql" value="true"/>
        <property name="hibernate.format_sql" value="true"/>
    </properties>
    </persistence-unit>
    </persistence>

h3(#6-verwendung-der-entitymanager-and-entitymanagerfactory). 6. Verwendung der EntityManager and EntityManagerFactory

* EntityManager

** Ein Persistenzkontext ist eine Menge von Entities (Objekt der Modellklassen.
** EntityManager wird verwendet, um mit dem Persistenzkontext zu interagieren (Datenbank).
** Verwaltung der Entitätsinstanzen und deren Lebenszyklus (begin und end).
** Verwendung der CRUD Methoden (create, update, remove, find, Query Entities). 
* EntityManagerFactory

** Die EntityManagerFactory wird einer Persistenzeinheit zugeordnet.
** Erzeugt eine EntityManager.

h3(#7-testprogramm). 7. Testprogramm

* Schritte:

** EntityManagerFactory erzeugen
** EntityManager erzeugen 
** Transaction beginnen 
** Persist ein Objekt (Bsp. Book)
** Commit die Transaction
** Close die EntityManager
** Close die EntityManagerFactory

h3(#8-ziel-to-do). 8. Ziel (To Do)

* KundenVerwaltung _Maven_ JPA_MySQL bearbeiten

** siehe KundenVerwaltung _Maven_ JPA _MySQL[Projectarbeit_ Persistenz master]

*** Testprogramm (BooksManager) Schritte folgen 

h3(#9-hibernate-lifeziklus-und-crud-methoden). 9. Hibernate Lifeziklus und CRUD Methoden

h3(#10-tips). 10. Tips

bc. - compiler error sign
-> In Eclipse > window > Show View > Other > Problems

bc. - Java compiler level does not match the version of the installed Java project facet
-> Can you do it: - Right-click on your project - Click Properties - Click the "Project Facets" option on the left
   menu - Under Facets section "Java" on the right, change it to  "1.8" or your version... - Click Ok
               

